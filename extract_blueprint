#!/usr/bin/env python3
#
## Copyright 2024 Ian Jauslin, Alex Kontorovich
## 
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## any later version.
## 
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <https://www.gnu.org/licenses/>.

import sys
import re
import os.path

# defaults
infiles=[]
outdir_str=""
start_delimiter=r"/\-%%"
end_delimiter=r"%%\-/"
line_delimiter=r"\-\-%%"
show="blueprint"

def print_help():
    print("Usage: extract_blueprint [-B|-L] [-s start_delimiter] [-e end_delimiter] [-l line_delimiter] [-O outdir] <input_file1.lean> ...\n\
\n\
  A tool to extract the blueprint from one ore more lean files specified with the arguments <input_file1.lean> ...\n\
\n\
  -B, --blueprint: print the blueprint, extracted from the input file (default)\n\
  -L, --lean: print the lean code from which the blueprint has been stripped\n\
  -s, --start_delimiter <start_delimiter>: a regular expression specifying the tag that opens a blueprint exntry (default: '/\\-%%')\n\
  -e, --end_delimiter <end_delimiter>: a regular expression specifying the tag that closes a blueprint exntry (default: '%%\\-/')\n\
  -l, --line_delimiter <line_delimiter>: a regular expression specifying a single line blueprint entry (default: '\\-\\-%%')\n\
  -O, --outdir <output_dir>: write output to the directory <output_dir>; the file names are automatically generated from the input files\n\
\n\
")


def main():
    read_cli()

    # open input files
    if infiles==[]:
        print_help()
        exit(-1)

    # loop over input files
    for infile_str in infiles:
        # open file
        infile=open(infile_str,'r')
        # read text
        text=infile.read()
        infile.close()
        # extract blueprint
        (blueprint,text_without)=extract_blueprint(text)

        # output file
        if outdir_str!="":
            outfile=open(outdir_str+output_name(infile_str),'w')
        else:
            outfile=sys.stdout

        if show=="blueprint":
            outfile.write(blueprint)
        elif show=="lean":
            outfile.write(text_without)


# read cli arguments
def read_cli():
    global infiles
    global outdir_str
    global start_delimiter
    global end_delimiter
    global line_delimiter
    global show

    flag=""

    for arg in sys.argv[1:]:
        if arg=="--help":
            print_help()
            exit(0)
        elif arg=="--start":
            flag="start_delimiter"
        elif arg=="--end":
            flag="end_delimiter"
        elif arg=="line":
            flag="line_delimiter"
        elif arg=="outdir":
            flag="outdir"
        elif arg=="--blueprint":
            show="blueprint"
        elif arg=="--lean":
            show="lean"

        elif arg[0]=='-':
            for letter in arg[1:]:
                if letter=='s':
                    flag="start_delimiter"
                elif letter=='e':
                    flag="end_delimiter"
                elif letter=='l':
                    flag="line_delimiter"
                elif letter=='O':
                    flag="outdir"
                elif letter=='B':
                    show="blueprint"
                elif letter=='L':
                    show="lean"

        else:
            if flag=="start_delimiter":
                start_delimiter=arg
                flag=""
            elif flag=="end_delimiter":
                end_delimiter=arg
                flag=""
            elif flag=="line_delimiter":
                line_delimiter=arg
                flag=""
            elif flag=="outdir":
                # check the directory exists
                if not os.path.isdir(arg):
                    print("error: '"+arg+"': no such directory", file=sys.stderr)
                    exit(-1)
                # add trailing slash if needed
                if len(arg)==0 or arg[len(arg)-1]!='/':
                    outdir_str=arg+"/"
                else:
                    outdir_str=arg
                flag=""

            # input file
            else:
                # check the file exists
                if not os.path.isfile(arg):
                    print("error: '"+arg+"': no such file", file=sys.stderr)
                    exit(-1)
                infiles.append(arg)


# name of the output file: strip '.lean' and add '.tex'
def output_name(input_file):
    # pathological case
    if input_file=="":
        return ""

    # strip directory
    split=input_file.split('/')
    filename=split[len(split)-1]

    # check extension
    extension=".lean"
    if len(filename)>=len(extension) and filename[len(filename)-len(extension):]==".lean":
        return filename[:len(filename)-len(extension)]+".tex"
    else:
        return filename+".tex"


def extract_blueprint(text):
    # dictionary of extracted text
    extracted=dict()

    # extract text between delimiters
    matches=re.finditer(start_delimiter+r'(.*?)'+end_delimiter, text, flags=re.DOTALL)
    for match in matches:
        # add to extracted dict
        extracted[match.start(1)]=match.group(1)

    # extract single lines
    matches=re.finditer(r'^'+line_delimiter+r'(.*)$', text, flags=re.MULTILINE)
    for match in matches:
        # add to extracted dict
        extracted[match.start(1)]=match.group(1)

    # text without blueprint
    text_without=re.sub(start_delimiter+r'.*?'+end_delimiter,'', text, flags=re.DOTALL)
    text_without=re.sub(r'^'+line_delimiter+r'.*$','', text_without, flags=re.MULTILINE)

    # sort extracted lines
    extracted=sorted(extracted.items())
    # combine entries
    out=""
    for item in extracted:
        out=out+item[1]+"\n"

    # return the blueprint and the lean file without the blueprint
    return (out,text_without)

main()
